@startuml

skin rose
title bean 的加载


participant "AbstractApplicationContext" as AbstractApplicationContext #DeepSkyBlue
participant "DefaultListableBeanFactory" as DefaultListableBeanFactory #orange
participant "AbstractBeanFactory" as AbstractBeanFactory #LightBlue
participant "AbstractAutowireCapableBeanFactory" as AbstractAutowireCapableBeanFactory #FFBBBB
participant "MergedBeanDefinitionPostProcessor" as MergedBeanDefinitionPostProcessor #LimeGreen
participant "DefaultSingletonBeanRegistry" as DefaultSingletonBeanRegistry #MediumAquaMarine
participant "ConstructorResolver" as ConstructorResolver #MediumAquaMarine


activate AbstractApplicationContext
AbstractApplicationContext -> AbstractApplicationContext: refresh
AbstractApplicationContext -> AbstractApplicationContext: finishBeanFactoryInitialization
note right of AbstractApplicationContext: 初始化剩下的单例对象
AbstractApplicationContext -> DefaultListableBeanFactory: preInstantiateSingletons\n 初始化剩下的单例对象
activate DefaultListableBeanFactory
DefaultListableBeanFactory -> DefaultListableBeanFactory: 遍历 beanNames 创建单例对象

group 合并父类 BeanDefinition
    DefaultListableBeanFactory -> AbstractBeanFactory: getMergedLocalBeanDefinition(beanName)
    activate AbstractBeanFactory
    note right of AbstractBeanFactory
        从缓存获取 RootBeanDefinition,不存在获取 MergeBeanDe(bd 存在父定义，需要与父定义合并)
        <color:red>此缓存是在 BFPP 中添加的
    end note
    AbstractBeanFactory -> AbstractBeanFactory: getMergedBeanDefinition
    note right of AbstractBeanFactory
        使用父 BeanDefinition 构建 RootBeanDefinition,
        子BeanDefinition覆盖RootBeanDefinition
    end note
    AbstractBeanFactory --> DefaultListableBeanFactory: 返回 RootBeanDefinition
    deactivate AbstractBeanFactory
end

DefaultListableBeanFactory -> AbstractBeanFactory: getBean(beanName)
deactivate DefaultListableBeanFactory

activate AbstractBeanFactory
AbstractBeanFactory -> AbstractBeanFactory: doGetBean(...)
group <color:red>从缓存中获取 bean]
    autonumber 1
    AbstractBeanFactory -> AbstractBeanFactory: transformedBeanName(name)
    note right of AbstractBeanFactory
        # 转换 beanName,
    end note
    AbstractBeanFactory -> DefaultSingletonBeanRegistry: getSingleton(beanName)
    note right of AbstractBeanFactory #aqua
        尝试从缓存从获取单例对象
        # 先从一级缓存获取，一级缓存没有从二级缓存获取
        # 都为空则对一级缓存加锁（双重校验锁），从三级缓存获取
        # 三级缓存存在，则执行 lambda 创建对象，可能返回代理对象或原对象，然后放入二级缓存中，并从三级缓存删除（二级缓存和三级缓存不能同时存在）
        # 都为空则返回空
    end note
    activate DefaultSingletonBeanRegistry
    autonumber stop
    DefaultSingletonBeanRegistry --> AbstractBeanFactory: 返回代理对象、具体对象或返回 null
    deactivate DefaultSingletonBeanRegistry
end
autonumber 3
AbstractBeanFactory -> AbstractBeanFactory: getMergedLocalBeanDefinition(beanName)\n获取 RootBeanDefinition
AbstractBeanFactory -> AbstractBeanFactory: mbd.getDependsOn()
note right of AbstractBeanFactory
    获取依赖关系,存在依赖,递归创建依赖的 bean
    registerDependentBean 注册各个 bean 的依赖关系
end note

AbstractBeanFactory -> DefaultSingletonBeanRegistry:getSingleton(beanName,ObjectFactory)
activate DefaultSingletonBeanRegistry
note right of DefaultSingletonBeanRegistry
    # 对一级缓存（singletonObject）全局变量加锁
    # 先检查一级缓存中是否存在，不存在调用 ObjectFactory#getObject() 创建对象
end note
deactivate DefaultSingletonBeanRegistry

AbstractBeanFactory -> AbstractAutowireCapableBeanFactory: createBean(...)
activate AbstractAutowireCapableBeanFactory #PowderBlue
note right of AbstractBeanFactory
    synchronized (this.singletonObjects) 加锁
    创建 bean 之前先从一级缓存中获取 bean
end note

==创建对象的几种方式==
autonumber 1
AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory:mbdToUse.prepareMethodOverrides() \n<color:red>lookup-method、replace-method 处理


AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory:resolveBeforeInstantiation(beanName,mdb)\n<color:red>BPP 创建代理对象(默认情况下不处理)
note right of AbstractAutowireCapableBeanFactory #aqua
    实例化之前调用 BeanPostProcessor
    给 BeanPostProcessors 一个机会来返回代理来替代真正的实例，
end note

AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: doCreateBean(beanName,mbd,...)
group 创建 bean 实例
    autonumber 1
    AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: createBeanInstance(beanName,mbd,...)
    note right of AbstractAutowireCapableBeanFactory
        使用对应的策略创建新的实例（反射创建 bean 实例)
        工厂方法，构造函数注入、简单初始化
    end note
    autonumber 1.1
    AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: obtainFromSupplier\n<color:red> 2.supplier 创建 bean
    AbstractAutowireCapableBeanFactory -> ConstructorResolver: instantiateUsingFactoryMethod\n<color:red> 3.工厂方法创建 bean
    activate ConstructorResolver
    ConstructorResolver -> ConstructorResolver: instantiateUsingFactoryMethod 选择合适的工厂方法很复杂后续看
    autonumber stop
    ConstructorResolver --> AbstractAutowireCapableBeanFactory: 返回工厂方法创建的对象
    deactivate ConstructorResolver
    AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: <color:red> 1.3. 使用构造方法创建 bean
    AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: determineConstructorsFromBeanPostProcessors\nBPP 中选择构造方法
    note right of AbstractAutowireCapableBeanFactory
        遍历 SmartInstantiationAwareBeanPostProcessor
        BPP#determineCandidateConstructors 返回构造方法
    end note
    AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: autowireConstructor\n自动装配的构造方法
    note right of AbstractAutowireCapableBeanFactory
        以下情况符合其一即可执行该方法
        1、存在可选构造方法
        2、自动装配模型为构造函数自动装配
        3、给 BeanDefinition 中设置了构造参数值
        4、有参与构造函数参数列表的参数
    end note

    AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: 获取 BeanDefinition 中构造方法创建 bean
    note right of AbstractAutowireCapableBeanFactory
        1. xml 中配置了构造方法
        2. xml 中未配置构造方法使用无参构造,反射创建 bean
    end note
end

==Merged BPP 的 postProcessMergedBeanDefinition 方法==

AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: <b>2. applyMergedBeanDefinitionPostProcessors(...)
note right of AbstractAutowireCapableBeanFactory #aqua
    MergedBeanDefinitionPostProcessor 后置处理器修改合并 bean 定义
end note

AbstractAutowireCapableBeanFactory -> MergedBeanDefinitionPostProcessor: postProcessMergedBeanDefinition
activate MergedBeanDefinitionPostProcessor
note right of AbstractAutowireCapableBeanFactory: 遍历调用该方法
MergedBeanDefinitionPostProcessor -> AbstractAutowireCapableBeanFactory:
deactivate MergedBeanDefinitionPostProcessor

==循环依赖处理==
AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory:<b>3. 判断当前 bean 是否需要提前曝露，添加三级缓存
note right of AbstractAutowireCapableBeanFactory
    是否是单例 && 是否允许循环依赖 && 当前 bean 正在创建中，检测循环依赖
    解决循环依赖，提前暴露（完成实例化，未完成初始化）
    1. 构造器循环依赖（无法解决）
    2. set 循环依赖（在此处解决）
end note

AbstractAutowireCapableBeanFactory -> DefaultSingletonBeanRegistry: addSingletonFactory(beanName,ObjectFactory)
activate DefaultSingletonBeanRegistry
note over DefaultSingletonBeanRegistry
    # 一级缓存中不存在,三级缓存添加 ObjectFactory（创建 bean 的 lambda）
    # 从二级缓存中移除(bean 不会同时在二级缓存,三级缓存中)
    # 注册 bean
    三级缓存中的 lambda 创建的 bean 可能是代理对象或正常bean，AOP 提前
end note
DefaultSingletonBeanRegistry -> AbstractAutowireCapableBeanFactory:
deactivate DefaultSingletonBeanRegistry
==填充属性==
AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory:<b>4. 初始化 bean 实例
AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: 4.1 populateBean(...)\n<color:red>填充属性，将属性解析到 PropertyValue 中
note over AbstractAutowireCapableBeanFactory #aqua
    BeanPostProcessor#postProcessAfterInstantiation
    BeanPostProcessor 实例化之后是否需要继续填充属性
end note

group 依赖注入
    AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: 根据 mbd 的自动装配模式依赖注入
    note right of AbstractAutowireCapableBeanFactory
        将依赖注入的属性放入 PropertyValues 中,后续赋值到 bean 中
        1. 按名称自动装配属性
        2. 按类型自动装配属性
    end note

    AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: unsatisfiedNonSimpleProperties \n<color:red>寻找 bw 中需要依赖注入的属性
    note right of AbstractAutowireCapableBeanFactory
        有 setter 方法
        非简单类型属性
        mbd 的 PropertyValues 中没有该 pd 的属性名的 PropertyDescriptor 属性名数组

        遍历属性名 peopertyName
        如果该 beanFactory 有 propertyName 的 beanDefinition 或外部注册的单例实例（配置文件或注解有定义 bean 信息）
        则 getBean 获取或创建依赖的 bean,放入 PropertyValues,并注册依赖关系
    end note

    AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: 遍历 InstantiationAwareBeanPostProcessor\n<color:red>注解属性赋值
    note right of AbstractAutowireCapableBeanFactory #aqua
        主要是 CommonAnnotationBeanPostProcessor,AutowiredAnnotationBeanPostProcessor
        属性值应用到 bean 之前进行后处理(注解的处理)
        1. postProcessProperties
        2. postProcessPropertyValues(在 5.1 版本被废弃)
    end note
    group 将属性应用到 bean 中
        AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: applyPropertyValues\n<color:red>将属性应用到 bean 中（Bean 对象设置具体的属性值），使用深拷贝
        note right of AbstractAutowireCapableBeanFactory
            遍历属性 PropertyValue
            1. 类型转换
            2. 深拷贝
        end note

        AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: BeanDefinitionValueResolver#resolveValueIfNecessary
        note right of AbstractAutowireCapableBeanFactory #Aquamarine
            根据 pv 解析封装的对象，bean 不存在会创建
        end note
    end
end
==初始化==
AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: <b>4.2 initializeBean(...)\n<color:red> 初始化,将 PropertyValue 中的赋值到 bean 中
AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: invokeAwareMethods(beanName,bean) \n<color:red> bean 实现 Aware 接口,执行 Aware 接口方法
AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: registerDisposableBeanIfNecessary\n<color:red> 钩子函数：容器关闭时，销毁对象
AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: applyBeanPostProcessorsBeforeInitialization(wrappedBean,beanName)
note right of AbstractAutowireCapableBeanFactory #aqua
    BeanPostProcessor 执行初始化之前方法
end note
group 调用初始化方法
    AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: invokeInitMethods(...)
    AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: ((InitializingBean) bean).afterPropertiesSet();
    note right of AbstractAutowireCapableBeanFactory: 调用 bean 的 afterPropertiesSet 方法（）
    AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: invokeCustomInitMethod(beanName,bean,mbd)
    note right of AbstractAutowireCapableBeanFactory: 调用自定义的 initMethod
end

AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: applyBeanPostProcessorsAfterInitialization(bean,beanName)
note right of AbstractAutowireCapableBeanFactory #aqua
    BeanPostProcessor 执行初始化之后方法
end note
==动态代理对象==
AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: AspectJAwareAdvisorAutoProxyCreator
note right of AbstractAutowireCapableBeanFactory
如果 bean 需要增强，会在此处创建代理对象
end note
AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory: 返回 bean 或代理 bean

==解决循环依赖==
AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory:  getSingleton(beanName, false)
note right of AbstractAutowireCapableBeanFactory
    从缓存中获取，此时 bean 从三级缓存放入了二级缓存，能从二级缓存获取到 bean
end note

AbstractAutowireCapableBeanFactory -> AbstractAutowireCapableBeanFactory:registerDisposableBeanIfNecessary(...)
note right of AbstractAutowireCapableBeanFactory:钩子函数：容器关闭时，销毁对象

AbstractAutowireCapableBeanFactory --> AbstractBeanFactory: 返回创建成功的 Bean
deactivate AbstractAutowireCapableBeanFactory

AbstractBeanFactory -> DefaultSingletonBeanRegistry: createBean 执行结束，回到 getSingleton(beanName,ObjectFactory) 方法
activate DefaultSingletonBeanRegistry

note right of DefaultSingletonBeanRegistry
    # 移除缓存中对该 bean 的正在加载状态的记录
end note

DefaultSingletonBeanRegistry -> DefaultSingletonBeanRegistry:addSingleton(beanName, singletonObject)
note right of DefaultSingletonBeanRegistry
    # 放入一级缓存，从二级缓存移除、从三级缓存移除
    将 beanName 添加到已注册的单例集中
end note
DefaultSingletonBeanRegistry --> AbstractBeanFactory: 返回最后完整的 bean
deactivate DefaultSingletonBeanRegistry

AbstractBeanFactory --> DefaultListableBeanFactory:

@enduml